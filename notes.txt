# Mini Challenge 1

## Issue Manager Setup and Basics

### Acceptance Criteria

1. Create a new django project in this directory (`~/Code/SDGKU/issue_mgr`)
2. Create the following apps:
2.1. pages
2.2. issues
2.3. accounts
3. Create a model for issues within `issues/models.py` that supports the following fields:
3.1. summary
3.2. description
3.3. reporter (foreign key to user model)
3.4. assignee (foreign key to user model)
3.5. status (foreign key to separate status model)
3.6. created_on (timestamp)
4. Create a separate status model with name and description

## Note
Add the `related_name` attribute to assignee, for example:
```
assignee = models.ForeignKey(
    get_user_model(),
    on_delete=models.CASCADE,
    related_name="assignee"
)
```
pzqM7483


heroku create 
git add -A 
git commit -m "something"
git push heroku main
heroku open
heroku log --tail

python3 manage.py flush
rm db.sqlite3

# Mini Challenge 2

## Populate Status for Issues

### Acceptance Criteria
1. There should be a status called `to do`
2. There should be a status called `in progress`
3. There should be a status called `done`
4. These statuses should exist upon any new successful deployment (via migrations)

# Mini Challenge 3

## Issue Management

# Stories
1. As a product owner I would like to create issues via a form so that I can represent work that needs to be done.
2. As a product owner I would like to be able to edit existing issues to correct discrepancies
3. As a scrum master I would like to delete issues that may no longer be relevant
3.1. Only scrum masters can delete issues
4. As an end user I would like to view all issues associated with my team so I can understand what needs to be done
5. As a developer I would like to be able to update the status on my issue so I can represent its progress (whether it is in progress or done)
6. As a scrum master I would like to assign an issue to a developer so that they can work on it

form valid method

class DraftIssueListView(ListView):
    template_name = "issues/list.html"
    model = Issue

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        inprogress_status = Status.objects.get(name="inprogress")
        context["issue_list"] = Issue.objects.filter(
            status=inprogress_status
        ).filter(
            reporter=self.request.user
        ).order_by("created_on").reverse()
        return context


class ArchivedIssueListView(LoginRequiredMixin, ListView):
    template_name = "issues/list.html"
    model = Issue

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        done_status = Status.objects.get(name="done")
        context["done_list"] = Issue.objects.filter(
            status=done_status
        ).order_by("created_on").reverse()
        return context

            path("drafts/", views.DraftIssueListView.as_view(), name="drafts"),
    path("archived/", views.ArchivedIssueListView.as_view(), name="archived"),